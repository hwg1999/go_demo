// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/product6.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderManagement6_AddOrder_FullMethodName     = "/proto.OrderManagement6/addOrder"
	OrderManagement6_UpdateOrders_FullMethodName = "/proto.OrderManagement6/updateOrders"
)

// OrderManagement6Client is the client API for OrderManagement6 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderManagement6Client interface {
	AddOrder(ctx context.Context, in *Order6, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	UpdateOrders(ctx context.Context, opts ...grpc.CallOption) (OrderManagement6_UpdateOrdersClient, error)
}

type orderManagement6Client struct {
	cc grpc.ClientConnInterface
}

func NewOrderManagement6Client(cc grpc.ClientConnInterface) OrderManagement6Client {
	return &orderManagement6Client{cc}
}

func (c *orderManagement6Client) AddOrder(ctx context.Context, in *Order6, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, OrderManagement6_AddOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderManagement6Client) UpdateOrders(ctx context.Context, opts ...grpc.CallOption) (OrderManagement6_UpdateOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManagement6_ServiceDesc.Streams[0], OrderManagement6_UpdateOrders_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagement6UpdateOrdersClient{stream}
	return x, nil
}

type OrderManagement6_UpdateOrdersClient interface {
	Send(*Order6) error
	CloseAndRecv() (*wrapperspb.StringValue, error)
	grpc.ClientStream
}

type orderManagement6UpdateOrdersClient struct {
	grpc.ClientStream
}

func (x *orderManagement6UpdateOrdersClient) Send(m *Order6) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderManagement6UpdateOrdersClient) CloseAndRecv() (*wrapperspb.StringValue, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(wrapperspb.StringValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagement6Server is the server API for OrderManagement6 service.
// All implementations must embed UnimplementedOrderManagement6Server
// for forward compatibility
type OrderManagement6Server interface {
	AddOrder(context.Context, *Order6) (*wrapperspb.StringValue, error)
	UpdateOrders(OrderManagement6_UpdateOrdersServer) error
	mustEmbedUnimplementedOrderManagement6Server()
}

// UnimplementedOrderManagement6Server must be embedded to have forward compatible implementations.
type UnimplementedOrderManagement6Server struct {
}

func (UnimplementedOrderManagement6Server) AddOrder(context.Context, *Order6) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedOrderManagement6Server) UpdateOrders(OrderManagement6_UpdateOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateOrders not implemented")
}
func (UnimplementedOrderManagement6Server) mustEmbedUnimplementedOrderManagement6Server() {}

// UnsafeOrderManagement6Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderManagement6Server will
// result in compilation errors.
type UnsafeOrderManagement6Server interface {
	mustEmbedUnimplementedOrderManagement6Server()
}

func RegisterOrderManagement6Server(s grpc.ServiceRegistrar, srv OrderManagement6Server) {
	s.RegisterService(&OrderManagement6_ServiceDesc, srv)
}

func _OrderManagement6_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order6)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagement6Server).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManagement6_AddOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagement6Server).AddOrder(ctx, req.(*Order6))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderManagement6_UpdateOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderManagement6Server).UpdateOrders(&orderManagement6UpdateOrdersServer{stream})
}

type OrderManagement6_UpdateOrdersServer interface {
	SendAndClose(*wrapperspb.StringValue) error
	Recv() (*Order6, error)
	grpc.ServerStream
}

type orderManagement6UpdateOrdersServer struct {
	grpc.ServerStream
}

func (x *orderManagement6UpdateOrdersServer) SendAndClose(m *wrapperspb.StringValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderManagement6UpdateOrdersServer) Recv() (*Order6, error) {
	m := new(Order6)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagement6_ServiceDesc is the grpc.ServiceDesc for OrderManagement6 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderManagement6_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrderManagement6",
	HandlerType: (*OrderManagement6Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addOrder",
			Handler:    _OrderManagement6_AddOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "updateOrders",
			Handler:       _OrderManagement6_UpdateOrders_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/product6.proto",
}
