// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/product5.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderManagement5_GetOrder_FullMethodName = "/proto.OrderManagement5/getOrder"
)

// OrderManagement5Client is the client API for OrderManagement5 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderManagement5Client interface {
	GetOrder(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Order5, error)
}

type orderManagement5Client struct {
	cc grpc.ClientConnInterface
}

func NewOrderManagement5Client(cc grpc.ClientConnInterface) OrderManagement5Client {
	return &orderManagement5Client{cc}
}

func (c *orderManagement5Client) GetOrder(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Order5, error) {
	out := new(Order5)
	err := c.cc.Invoke(ctx, OrderManagement5_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderManagement5Server is the server API for OrderManagement5 service.
// All implementations must embed UnimplementedOrderManagement5Server
// for forward compatibility
type OrderManagement5Server interface {
	GetOrder(context.Context, *wrapperspb.StringValue) (*Order5, error)
	mustEmbedUnimplementedOrderManagement5Server()
}

// UnimplementedOrderManagement5Server must be embedded to have forward compatible implementations.
type UnimplementedOrderManagement5Server struct {
}

func (UnimplementedOrderManagement5Server) GetOrder(context.Context, *wrapperspb.StringValue) (*Order5, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderManagement5Server) mustEmbedUnimplementedOrderManagement5Server() {}

// UnsafeOrderManagement5Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderManagement5Server will
// result in compilation errors.
type UnsafeOrderManagement5Server interface {
	mustEmbedUnimplementedOrderManagement5Server()
}

func RegisterOrderManagement5Server(s grpc.ServiceRegistrar, srv OrderManagement5Server) {
	s.RegisterService(&OrderManagement5_ServiceDesc, srv)
}

func _OrderManagement5_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderManagement5Server).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderManagement5_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderManagement5Server).GetOrder(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderManagement5_ServiceDesc is the grpc.ServiceDesc for OrderManagement5 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderManagement5_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrderManagement5",
	HandlerType: (*OrderManagement5Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getOrder",
			Handler:    _OrderManagement5_GetOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/product5.proto",
}
