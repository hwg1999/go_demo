// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/product2.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderManagement2_SearchOrders_FullMethodName = "/proto.OrderManagement2/searchOrders"
)

// OrderManagement2Client is the client API for OrderManagement2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderManagement2Client interface {
	SearchOrders(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (OrderManagement2_SearchOrdersClient, error)
}

type orderManagement2Client struct {
	cc grpc.ClientConnInterface
}

func NewOrderManagement2Client(cc grpc.ClientConnInterface) OrderManagement2Client {
	return &orderManagement2Client{cc}
}

func (c *orderManagement2Client) SearchOrders(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (OrderManagement2_SearchOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManagement2_ServiceDesc.Streams[0], OrderManagement2_SearchOrders_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagement2SearchOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderManagement2_SearchOrdersClient interface {
	Recv() (*Order2, error)
	grpc.ClientStream
}

type orderManagement2SearchOrdersClient struct {
	grpc.ClientStream
}

func (x *orderManagement2SearchOrdersClient) Recv() (*Order2, error) {
	m := new(Order2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagement2Server is the server API for OrderManagement2 service.
// All implementations must embed UnimplementedOrderManagement2Server
// for forward compatibility
type OrderManagement2Server interface {
	SearchOrders(*wrapperspb.StringValue, OrderManagement2_SearchOrdersServer) error
	mustEmbedUnimplementedOrderManagement2Server()
}

// UnimplementedOrderManagement2Server must be embedded to have forward compatible implementations.
type UnimplementedOrderManagement2Server struct {
}

func (UnimplementedOrderManagement2Server) SearchOrders(*wrapperspb.StringValue, OrderManagement2_SearchOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchOrders not implemented")
}
func (UnimplementedOrderManagement2Server) mustEmbedUnimplementedOrderManagement2Server() {}

// UnsafeOrderManagement2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderManagement2Server will
// result in compilation errors.
type UnsafeOrderManagement2Server interface {
	mustEmbedUnimplementedOrderManagement2Server()
}

func RegisterOrderManagement2Server(s grpc.ServiceRegistrar, srv OrderManagement2Server) {
	s.RegisterService(&OrderManagement2_ServiceDesc, srv)
}

func _OrderManagement2_SearchOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderManagement2Server).SearchOrders(m, &orderManagement2SearchOrdersServer{stream})
}

type OrderManagement2_SearchOrdersServer interface {
	Send(*Order2) error
	grpc.ServerStream
}

type orderManagement2SearchOrdersServer struct {
	grpc.ServerStream
}

func (x *orderManagement2SearchOrdersServer) Send(m *Order2) error {
	return x.ServerStream.SendMsg(m)
}

// OrderManagement2_ServiceDesc is the grpc.ServiceDesc for OrderManagement2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderManagement2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrderManagement2",
	HandlerType: (*OrderManagement2Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "searchOrders",
			Handler:       _OrderManagement2_SearchOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/product2.proto",
}
