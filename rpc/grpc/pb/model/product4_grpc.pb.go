// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/product4.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderManagement4_ProcessOrders_FullMethodName = "/proto.OrderManagement4/processOrders"
)

// OrderManagement4Client is the client API for OrderManagement4 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderManagement4Client interface {
	ProcessOrders(ctx context.Context, opts ...grpc.CallOption) (OrderManagement4_ProcessOrdersClient, error)
}

type orderManagement4Client struct {
	cc grpc.ClientConnInterface
}

func NewOrderManagement4Client(cc grpc.ClientConnInterface) OrderManagement4Client {
	return &orderManagement4Client{cc}
}

func (c *orderManagement4Client) ProcessOrders(ctx context.Context, opts ...grpc.CallOption) (OrderManagement4_ProcessOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManagement4_ServiceDesc.Streams[0], OrderManagement4_ProcessOrders_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagement4ProcessOrdersClient{stream}
	return x, nil
}

type OrderManagement4_ProcessOrdersClient interface {
	Send(*wrapperspb.StringValue) error
	Recv() (*CombinedShipment, error)
	grpc.ClientStream
}

type orderManagement4ProcessOrdersClient struct {
	grpc.ClientStream
}

func (x *orderManagement4ProcessOrdersClient) Send(m *wrapperspb.StringValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderManagement4ProcessOrdersClient) Recv() (*CombinedShipment, error) {
	m := new(CombinedShipment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagement4Server is the server API for OrderManagement4 service.
// All implementations must embed UnimplementedOrderManagement4Server
// for forward compatibility
type OrderManagement4Server interface {
	ProcessOrders(OrderManagement4_ProcessOrdersServer) error
	mustEmbedUnimplementedOrderManagement4Server()
}

// UnimplementedOrderManagement4Server must be embedded to have forward compatible implementations.
type UnimplementedOrderManagement4Server struct {
}

func (UnimplementedOrderManagement4Server) ProcessOrders(OrderManagement4_ProcessOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessOrders not implemented")
}
func (UnimplementedOrderManagement4Server) mustEmbedUnimplementedOrderManagement4Server() {}

// UnsafeOrderManagement4Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderManagement4Server will
// result in compilation errors.
type UnsafeOrderManagement4Server interface {
	mustEmbedUnimplementedOrderManagement4Server()
}

func RegisterOrderManagement4Server(s grpc.ServiceRegistrar, srv OrderManagement4Server) {
	s.RegisterService(&OrderManagement4_ServiceDesc, srv)
}

func _OrderManagement4_ProcessOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderManagement4Server).ProcessOrders(&orderManagement4ProcessOrdersServer{stream})
}

type OrderManagement4_ProcessOrdersServer interface {
	Send(*CombinedShipment) error
	Recv() (*wrapperspb.StringValue, error)
	grpc.ServerStream
}

type orderManagement4ProcessOrdersServer struct {
	grpc.ServerStream
}

func (x *orderManagement4ProcessOrdersServer) Send(m *CombinedShipment) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderManagement4ProcessOrdersServer) Recv() (*wrapperspb.StringValue, error) {
	m := new(wrapperspb.StringValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagement4_ServiceDesc is the grpc.ServiceDesc for OrderManagement4 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderManagement4_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrderManagement4",
	HandlerType: (*OrderManagement4Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "processOrders",
			Handler:       _OrderManagement4_ProcessOrders_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/product4.proto",
}
