// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/product3.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderManagement3_UpdateOrders_FullMethodName = "/proto.OrderManagement3/updateOrders"
)

// OrderManagement3Client is the client API for OrderManagement3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderManagement3Client interface {
	UpdateOrders(ctx context.Context, opts ...grpc.CallOption) (OrderManagement3_UpdateOrdersClient, error)
}

type orderManagement3Client struct {
	cc grpc.ClientConnInterface
}

func NewOrderManagement3Client(cc grpc.ClientConnInterface) OrderManagement3Client {
	return &orderManagement3Client{cc}
}

func (c *orderManagement3Client) UpdateOrders(ctx context.Context, opts ...grpc.CallOption) (OrderManagement3_UpdateOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderManagement3_ServiceDesc.Streams[0], OrderManagement3_UpdateOrders_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &orderManagement3UpdateOrdersClient{stream}
	return x, nil
}

type OrderManagement3_UpdateOrdersClient interface {
	Send(*Order3) error
	CloseAndRecv() (*wrapperspb.StringValue, error)
	grpc.ClientStream
}

type orderManagement3UpdateOrdersClient struct {
	grpc.ClientStream
}

func (x *orderManagement3UpdateOrdersClient) Send(m *Order3) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderManagement3UpdateOrdersClient) CloseAndRecv() (*wrapperspb.StringValue, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(wrapperspb.StringValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagement3Server is the server API for OrderManagement3 service.
// All implementations must embed UnimplementedOrderManagement3Server
// for forward compatibility
type OrderManagement3Server interface {
	UpdateOrders(OrderManagement3_UpdateOrdersServer) error
	mustEmbedUnimplementedOrderManagement3Server()
}

// UnimplementedOrderManagement3Server must be embedded to have forward compatible implementations.
type UnimplementedOrderManagement3Server struct {
}

func (UnimplementedOrderManagement3Server) UpdateOrders(OrderManagement3_UpdateOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateOrders not implemented")
}
func (UnimplementedOrderManagement3Server) mustEmbedUnimplementedOrderManagement3Server() {}

// UnsafeOrderManagement3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderManagement3Server will
// result in compilation errors.
type UnsafeOrderManagement3Server interface {
	mustEmbedUnimplementedOrderManagement3Server()
}

func RegisterOrderManagement3Server(s grpc.ServiceRegistrar, srv OrderManagement3Server) {
	s.RegisterService(&OrderManagement3_ServiceDesc, srv)
}

func _OrderManagement3_UpdateOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderManagement3Server).UpdateOrders(&orderManagement3UpdateOrdersServer{stream})
}

type OrderManagement3_UpdateOrdersServer interface {
	SendAndClose(*wrapperspb.StringValue) error
	Recv() (*Order3, error)
	grpc.ServerStream
}

type orderManagement3UpdateOrdersServer struct {
	grpc.ServerStream
}

func (x *orderManagement3UpdateOrdersServer) SendAndClose(m *wrapperspb.StringValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderManagement3UpdateOrdersServer) Recv() (*Order3, error) {
	m := new(Order3)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderManagement3_ServiceDesc is the grpc.ServiceDesc for OrderManagement3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderManagement3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrderManagement3",
	HandlerType: (*OrderManagement3Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "updateOrders",
			Handler:       _OrderManagement3_UpdateOrders_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/product3.proto",
}
